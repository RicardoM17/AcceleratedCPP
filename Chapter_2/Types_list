Types:bool
Built-in type representing truth values; may be either true or false
unsigned
Integral type that contains only non-negative values
short
Integral type that must hold at least 16 bits
long
Integral type that must hold at least 32 bits
size_t
Unsigned integral type (from <cstddef> ) that can hold any object's size
string::size_type
Unsigned integral type that can hold the size of any string
Half-open ranges include one but not both of their endpoints. For example, [1, 3)
includes 1 and 2 , but not 3 .
Condition: An expression that yields a truth value. Arithmetic values used in conditions are
converted to bool : Nonzero values convert to true ; zero values convert to false .
Statements:
using namespace-name::name ;
Defines name as a synonym for namespace-name::name .
type-name name;
Defines name with type type-name .
type-name name = value;
Defines name with type type-name initialized as a copy of value.
type-name name(args) ;
Defines name with type type-name constructed as appropriate for the given arguments
in args .
expression ;
Executes expression for its side effects.
{ statement(s) }
Called a block. Executes the sequence of zero or more statement(s) in order. May
be used wherever a statement is expected. Variables defined inside the braces have
scope limited to the block.while (condition) statement
If condition is false , do nothing; otherwise, execute statement and then repeat the
entire while .
for(init-statement condition; expression) statement
Equivalent to { init-statement while (condition ) {statement expression
; } } .
if (condition) statement
Executes statement if condition is true .
if (condition) statement else statement2
Executes statement if condition is true , otherwise executes statement2 .
Each else is associated with the nearest matching if .
return val ;
Exits the function and returns val to its caller.